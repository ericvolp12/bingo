package main

import (
	"context"
	"log"
	"net/http"
	"time"

	"connectrpc.com/connect"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"

	bingov1 "github.com/ericvolp12/bingo/gen/bingo/v1" // generated by protoc-gen-go
	"github.com/ericvolp12/bingo/gen/bingo/v1/bingov1connect"
	connect_go_prometheus "github.com/ericvolp12/connect-go-prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

type LookupServer struct{}

func (s *LookupServer) Lookup(
	ctx context.Context,
	req *connect.Request[bingov1.LookupRequest],
) (*connect.Response[bingov1.LookupResponse], error) {
	log.Println("Request headers: ", req.Header())
	res := connect.NewResponse(&bingov1.LookupResponse{
		Handle:          "bingo",
		Did:             "did:bingo:123",
		IsValid:         true,
		LastCheckedTime: uint64(time.Now().UnixNano()),
	})
	res.Header().Set("Bingo-Version", "v1")
	return res, nil
}

func main() {
	lookup := &LookupServer{}
	mux := http.NewServeMux()
	interceptor := connect_go_prometheus.NewInterceptor()
	path, handler := bingov1connect.NewBingoServiceHandler(lookup, connect.WithInterceptors(interceptor))
	mux.Handle(path, handler)
	mux.Handle("/metrics", promhttp.Handler())
	http.ListenAndServe(
		"0.0.0.0:8923",
		// Use h2c so we can serve HTTP/2 without TLS.
		h2c.NewHandler(mux, &http2.Server{}),
	)
}
